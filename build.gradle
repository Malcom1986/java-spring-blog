plugins {
  id 'application'
  id 'checkstyle'
  id 'org.springframework.boot' version '2.5.3'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'com.adarshr.test-logger' version '2.1.1'
  id 'com.github.ben-manes.versions' version '0.38.0'
  id 'org.liquibase.gradle' version '2.0.4'
  id 'com.github.johnrengelman.processes' version '0.5.0'
  id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
  id 'org.siouan.frontend-jdk11' version '6.0.0'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'

application {
  mainClass = 'io.hexlet.javaspringblog.JavaSpringBlogApplication'
}

repositories {
  mavenCentral()
}

dependencies {
  // runtimeOnly 'org.postgresql:postgresql:42.3.1'
  // liquibaseRuntime 'org.postgresql:postgresql:42.3.1'

  compileOnly 'org.projectlombok:lombok:1.18.22'

  annotationProcessor(
          'org.projectlombok:lombok:1.18.22',
          'com.querydsl:querydsl-apt:5.0.0:jpa',
          'javax.annotation:javax.annotation-api:1.3.2',
          'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
  )
  developmentOnly 'org.springframework.boot:spring-boot-devtools:2.5.6'

  implementation(
          'org.springframework.boot:spring-boot-starter-data-jpa:2.5.6',
          'org.springframework.boot:spring-boot-starter-web:2.5.6',
          'org.springframework.boot:spring-boot-starter-actuator:2.5.6',
          'org.springframework.boot:spring-boot-starter-thymeleaf:2.5.6',
          'org.springframework.boot:spring-boot-starter-validation:2.5.6',
          'org.springframework.boot:spring-boot-starter-security:2.5.6',
          'io.jsonwebtoken:jjwt:0.9.1',
          'org.springdoc:springdoc-openapi-ui:1.5.12',
          'org.liquibase:liquibase-core:4.6.1',
          'com.querydsl:querydsl-core:5.0.0',
          'com.querydsl:querydsl-jpa:5.0.0',
          'org.modelmapper:modelmapper:2.4.5'
  )

  liquibaseRuntime(
          sourceSets.main.output,
          'org.liquibase:liquibase-core:4.6.1',
          'org.liquibase.ext:liquibase-hibernate5:4.5.0',
          'org.springframework.boot:spring-boot-starter-data-jpa:2.5.6'
  )

  runtimeOnly (
          'com.h2database:h2:1.4.200',
          'org.postgresql:postgresql:42.2.24'
  )

  testImplementation(
          'org.springframework.boot:spring-boot-starter-security:2.5.6',
          'org.springframework.security:spring-security-test:5.5.1',
          'org.springframework.boot:spring-boot-starter-test:2.5.6',
          'com.tobedevoured.modelcitizen:spring:0.8.3'
  )

  // testRuntimeOnly 'com.h2database:h2:1.4.200'

}

wrapper {
  gradleVersion = '7.3'
  distributionType = Wrapper.DistributionType.ALL
}

compileJava {
  options.release = 16
  options.encoding = 'UTF-8'
}

test {
  useJUnitPlatform()
}

// Настраиваем таскуdiffChangeLog таким образом,
// чтобы миграция генерировалась при каждом изменении в модели
//diffChangeLog {
//  dependsOn compileJava
//}
//
//// Настраиваем Liquibase
//liquibase {
//  activities {
//    main {
//      // Указываем путь, по которому будет сгенерирован файл миграции
//      changeLogFile 'src/main/resources/db/changelog/changelog-master.xml'
//      // Указывем источник, с которым будут сравниваться изменния
//      // Это база данных, изначально она пустая
//      url 'jdbc:h2:./taskManager'
//      // Имя пользователя и пароль для подключения к базе
//      username ''
//      password ''
//      // Указывем, откуда мы будем брать изменения
//      // Это модели
//      // Указываем пакет, в котором расположены модели
//      referenceUrl 'hibernate:spring:hexlet.code.model.' +
//              // Указываем диалект
//              '?dialect=org.hibernate.dialect.H2Dialect' +
//              // Указываем правила именования таблиц и столбцов,
//              // чтобы они соответствовали правилам Spring
//              '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
//    }
//  }
//}

frontend {
  nodeVersion = '16.13.1'
  assembleScript = 'run build'
  packageJsonDirectory = file("${projectDir}/frontend")
}

task copyFrontendToBuild(type: Copy) {
  from "$projectDir/frontend/build"
  into "$buildDir/resources/main/static"
  dependsOn 'assembleFrontend'
}

processResources.dependsOn copyFrontendToBuild

// for deploy
task stage(dependsOn: ['clean', 'installDist'])
installDist.mustRunAfter clean
